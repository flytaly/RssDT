# import * from './generated/prisma.graphql'
directive @isAuthenticated(permission: Permission = USER) on FIELD | FIELD_DEFINITION | OBJECT

type Message {
    message: String
}

type User {
    id: ID!
    email: String!
    feeds: [UserFeed!]!
    permissions: [Permission!]!
    locale: String
    timeZone: String
    createdAt: DateTime!
    dailyDigestHour: Int
    shareEnable: Boolean
    filterShare: [String!]!
}

type UserFeed {
    id: ID!
    feed: Feed!
    schedule: DigestSchedule
    user: User
    lastUpdate: DateTime
    createdAt: DateTime
    activated: Boolean
}

input MyFeedUpdateInput {
    schedule: DigestSchedule
}

input MyInfoUpdateInput {
    locale: String
    timeZone: String
    dailyDigestHour: Int
    shareEnable: Boolean
    filterShare: [String]
}

type Feed {
    id: ID!
    url: String!
    link: String
    title: String
    description: String
    imageUrl: String
    imageTitle: String
    items(
        where: FeedItemWhereInput
        orderBy: FeedItemOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [FeedItem!]
}

type UserFeedTitle {
    title: String
}

type Mutation {
    """
    Add feed to user with given email.
    If user doesn't exist the mutation will create a new user.
    """
    addFeed(email: String!, feedUrl: String, feedSchedule: DigestSchedule, locale: String, timeZone: String): Message!
    confirmSubscription(token: String!): Message!
    deleteMyFeed(id: ID!): UserFeed! @isAuthenticated
    resendActivationLink(id: ID!): Message!
    requestUnsubscribe(id: ID!): Message!
    requestPasswordChange(email: String!): Message!
    setPassword(token: String!, password: String!): User!
    signIn(email: String!, password: String!): Message!
    signOut: Message!
    unsubscribe(token: String!): UserFeed!
    updateMyFeed(data: MyFeedUpdateInput!, id: ID!): UserFeed! @isAuthenticated
    updateMyInfo(data: MyInfoUpdateInput): User @isAuthenticated
}

type Query {
    me: User @isAuthenticated
    myFeeds(
        orderBy: UserFeedOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [UserFeed!]! @isAuthenticated
    myFeedItems(
        feedId: ID!
        orderBy: FeedItemOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [FeedItem]! @isAuthenticated
    feedItemsConnection(
        where: FeedItemWhereInput
        orderBy: FeedItemOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): FeedItemConnection! @isAuthenticated
    userFeedTitle(id: ID!): UserFeedTitle

    #  ADMIN QUERIES
    users(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User]! @isAuthenticated(permission: ADMIN)
    usersConnection(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): UserConnection! @isAuthenticated(permission: ADMIN)
}

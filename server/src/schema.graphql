# import * from './generated/prisma.graphql'
directive @isAuthenticated(permission: Permission = USER) on FIELD | FIELD_DEFINITION | OBJECT

type Message {
    message: String
}

type User {
    id: ID!
    email: String!
    feeds: [UserFeed!]!
    permissions: [Permission!]!
    createdAt: DateTime!
}

type UserFeed {
    id: ID!
    feed: Feed!
    schedule: DigestSchedule
    user: User
    lastUpdate: DateTime
    createdAt: DateTime
}

input MyFeedUpdateInput {
    schedule: DigestSchedule
}

type Feed {
    url: String!
    link: String
    title: String
    description: String
    imageUrl: String
    imageTitle: String
    items(
        where: FeedItemWhereInput
        orderBy: FeedItemOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [FeedItem!]
}

type Mutation {
    """
    Add feed to user with given email.
    If user doesn't exist the mutation will create a new user.
    """
    addFeed(email: String!, feedUrl: String, feedSchedule: DigestSchedule): Message!
    confirmSubscription(token: String!): Message!
    deleteMyFeed(id: ID!): UserFeed! @isAuthenticated
    requestPasswordChange(email: String!): Message!
    setPassword(token: String!, password: String!): User!
    signIn(email: String!, password: String!): Message!
    signOut: Message!
    updateMyFeed(data: MyFeedUpdateInput!, id: ID!): UserFeed! @isAuthenticated
}

type Query {
    me: User @isAuthenticated
    myFeeds: [UserFeed!]! @isAuthenticated
}
